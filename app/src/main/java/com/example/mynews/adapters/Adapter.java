package com.example.mynews.adapters;import android.annotation.SuppressLint;import android.content.Context;import android.content.Intent;import android.graphics.drawable.Drawable;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.webkit.WebView;import android.widget.ImageView;import android.widget.TextView;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.cardview.widget.CardView;import androidx.recyclerview.widget.RecyclerView;import com.bumptech.glide.Glide;import com.bumptech.glide.load.DataSource;import com.bumptech.glide.load.engine.DiskCacheStrategy;import com.bumptech.glide.load.engine.GlideException;import com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions;import com.bumptech.glide.request.RequestListener;import com.bumptech.glide.request.RequestOptions;import com.bumptech.glide.request.target.Target;import com.example.mynews.R;import com.example.mynews.activities.ViewArticle;import com.example.mynews.interfaces.SelectItemClickListener;import com.example.mynews.models.Article;import com.example.mynews.models.NewsModel;import com.example.mynews.utils.ItemAnimation;import com.example.mynews.utils.Utils;import com.google.android.material.chip.Chip;import org.jetbrains.annotations.NotNull;import java.util.ArrayList;import java.util.List;public class Adapter extends RecyclerView.Adapter<Adapter.MyViewHolder> {    Context context;    List<Article> newsArticleArrayList;    private OnItemClickListener onItemClickListener;    private int lastPosition = -1;    private int animation_type = 0;    private boolean on_attach = true;    public Adapter(Context context, List<Article> newsModelArrayList) {        this.context = context;        this.newsArticleArrayList = newsModelArrayList;    }    @NonNull    @NotNull    @Override    public MyViewHolder onCreateViewHolder(@NonNull @NotNull ViewGroup parent, int viewType) {        View view = LayoutInflater.from(context).inflate(R.layout.list_items, parent, false);        return new Adapter.MyViewHolder(view,onItemClickListener);    }    @Override    public void onBindViewHolder(@NonNull @NotNull Adapter.MyViewHolder holder, @SuppressLint("RecyclerView") int position) {        final MyViewHolder viewHolder = holder;        Article article = newsArticleArrayList.get(position);        viewHolder.cardView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(context, ViewArticle.class);                intent.putExtra("url", newsArticleArrayList.get(position).getUrl());                context.startActivity(intent);            }        });        viewHolder.tvTitle.setText(article.getTitle());        viewHolder.tvAuthor.setText(article.getAuthor());        viewHolder.tvSource.setText(article.getSource().getName());        viewHolder.tvTime.setText(String.format("â€¢%s", Utils.DateToTimeFormat(article.getPublishedAt())));        viewHolder.tvContent.setText(article.getContent());        RequestOptions requestOptions = new RequestOptions();        requestOptions.placeholder(Utils.getRandomDrawbleColor());        requestOptions.error(Utils.getRandomDrawbleColor());        requestOptions.diskCacheStrategy(DiskCacheStrategy.ALL);        requestOptions.centerCrop();        Glide.with(context)                .load(article.getUrlToImage())                .apply(requestOptions)                .listener(new RequestListener<Drawable>() {                    @Override                    public boolean onLoadFailed(@Nullable GlideException e, Object model, Target<Drawable> target, boolean isFirstResource) {                        //  viewHolder.progress_circular.setVisibility(View.GONE);                        return false;                    }                    @Override                    public boolean onResourceReady(Drawable resource, Object model, Target<Drawable> target, DataSource dataSource, boolean isFirstResource) {                        //  viewHolder.progress_circular.setVisibility(View.GONE);                        return false;                    }                }).transition(DrawableTransitionOptions.withCrossFade())                .into(viewHolder.imgHeadline);        setAnimation(viewHolder.itemView, position);    }    @Override    public int getItemCount() {        return newsArticleArrayList.size();    }    private void setAnimation(View view, int position) {        if (position > lastPosition) {            ItemAnimation.animate(view, on_attach ? position : -1, animation_type);            lastPosition = position;        }    }    public interface OnItemClickListener {        void onItemClick(View view, int position);    }    public void setOnItemClickListener(OnItemClickListener onItemClickListener) {        this.onItemClickListener = onItemClickListener;    }    @Override    public void onAttachedToRecyclerView(@NonNull RecyclerView recyclerView) {        recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {            @Override            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                on_attach = false;                super.onScrollStateChanged(recyclerView, newState);            }        });        super.onAttachedToRecyclerView(recyclerView);    }    public class MyViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener{        CardView cardView;        ImageView imgHeadline;        TextView tvTitle, tvSource, tvTime, tvAuthor, tvContent;        Adapter.OnItemClickListener onItemClickListener;        public MyViewHolder(@NonNull View itemView, OnItemClickListener onItemClickListener) {            super(itemView);            tvAuthor = itemView.findViewById(R.id.tvAuthor);            tvTitle = itemView.findViewById(R.id.tvTitle);            tvSource = itemView.findViewById(R.id.tvSource);            tvContent = itemView.findViewById(R.id.tvContent);            tvTime = itemView.findViewById(R.id.tvTime);            imgHeadline = itemView.findViewById(R.id.imgHeadline);            cardView = itemView.findViewById(R.id.card);            this.onItemClickListener = onItemClickListener;        }        @Override        public void onClick(View view) {            onItemClickListener.onItemClick(view, getAbsoluteAdapterPosition());        }    }}